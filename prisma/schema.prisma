generator user {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  location      String?
  biography     String?
  phone         String?
  suspension    Int?      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  freelancer   Freelancer?
  client       Client?
  accounts     Account[]
  favorites    Favorite[]
  messages     Message[]   @relation("client")
  offers       Offer[]
  reviews      Review[]
  sentMessages Message[]   @relation("sender")
}

model Client {
  id String @id @default(cuid())

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  contracts Contract[]
}

model Freelancer {
  id String @id @default(cuid())

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String        @unique
  gigs         Gig[]
  offers       Offer[]
  comments     Comment[]
  skills       Skill[]
  contracts    Contract[]
  employments  Employment[]
  educations   Education[]
  testimonials Testimonial[]
  messages     Message[]

  @@index([userId])
}

model Employment {
  id          String  @id @default(cuid())
  company     String
  description String  @db.VarChar(5000)
  position    String
  location    String
  from        String
  to          String
  isActive    Boolean

  freelancer   Freelancer? @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  freelancerId String?

  @@index([freelancerId])
}

model Education {
  id     String @id @default(cuid())
  school String
  degree String
  area   String
  from   String
  to     String

  freelancer   Freelancer? @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  freelancerId String?

  @@index([freelancerId])
}

model Testimonial {
  id       String @id @default(cuid())
  name     String
  position String
  email    String
  message  String @db.VarChar(5000)

  freelancer   Freelancer? @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  freelancerId String?

  @@index([freelancerId])
}

model Gig {
  id          String @id @default(cuid())
  title       String
  description String @db.VarChar(5000)
  period      Int
  from        Int
  to          Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  freelancer   Freelancer  @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  freelancerId String
  category     Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String
  thumbnails   Thumbnail[]
  contracts    Contract[]
  reviews      Review[]
  offers       Offer[]
  tags         Tag[]
  favorites    Favorite[]

  @@unique([title])
  @@index([freelancerId])
  @@index([categoryId])
}

model Favorite {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  gig    Gig    @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId  String

  @@index([userId])
  @@index([gigId])
}

model Skill {
  id String @id @default(cuid())

  freelancer   Freelancer  @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  freelancerId String
  technology   Technology? @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  technologyId String?

  @@unique([freelancerId, technologyId])
  @@index([freelancerId])
  @@index([technologyId])
}

model Technology {
  id   String @id @default(cuid())
  name String @unique
  logo String

  skills Skill[]
  tags   Tag[]
}

model Tag {
  id String @id @default(cuid())

  technology   Technology? @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  technologyId String?
  gig          Gig         @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId        String

  @@index([technologyId])
  @@index([gigId])
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  gigs Gig[]
}

model Thumbnail {
  id          String @id @default(cuid())
  image       String
  title       String
  description String @db.VarChar(5000)
  repository  String
  website     String

  gig   Gig    @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId String

  @@index([gigId])
}

model Contract {
  id     String @id @default(cuid())
  status Status

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  freelancerId String
  client       Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId     String
  gig          Gig        @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId        String

  @@index([freelancerId])
  @@index([clientId])
  @@index([gigId])
}

model Offer {
  id           String  @id @default(cuid())
  title        String
  description  String  @db.VarChar(5000)
  isAccepted   Boolean @default(false)
  deliveryDays Int
  price        Int
  revision     Int
  status       Status  @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  freelancerId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  gig          Gig        @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId        String

  @@index([freelancerId])
  @@index([userId])
  @@index([gigId])
}

model Review {
  id      String @id @default(cuid())
  message String @db.VarChar(5000)
  rating  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  gig      Gig       @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId    String
  comments Comment[]
  User     User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([gigId])
}

model Comment {
  id      String @id @default(cuid())
  message String @db.VarChar(5000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  freelancerId String
  review       Review     @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId     String

  @@index([freelancerId])
  @@index([reviewId])
}

model Message {
  id           String     @id @default(cuid())
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  freelancerId String

  text   String @db.VarChar(5000)
  user   User   @relation("client", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  sender   User   @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  @@index([freelancerId])
  @@index([senderId])
  @@index([userId])
}

enum Status {
  PENDING
  WORKING
  DELIVERED
  COMPLETED
}
